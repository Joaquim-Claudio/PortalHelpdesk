// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalHelpdesk.Contexts;

#nullable disable

namespace PortalHelpdesk.Migrations
{
    [DbContext(typeof(HelpdeskContext))]
    [Migration("20250908123224_TicketUpdate")]
    partial class TicketUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortalHelpdesk.Models.AtomicOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AtomicOperations");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Attachments.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Attachments.MessageAttachment", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.HasKey("MessageId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Attachments.ResolutionAttachment", b =>
                {
                    b.Property<int>("ResolutionId")
                        .HasColumnType("integer");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.HasKey("ResolutionId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("ResolutionAttachments");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Messages.ConversationMessage", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("ConversationMessages");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cc")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aquisição"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cibersegurança"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Infor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Microsoft 365"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Infraestrutura"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Portais e Websites"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ferramentas Desktop"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SAP"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Contas e Acessos"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Outras"
                        });
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AtomicOperationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("integer");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AtomicOperationId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistories");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketPriorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Alta"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Média"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Baixa"
                        },
                        new
                        {
                            Id = 4,
                            Level = "Normal"
                        },
                        new
                        {
                            Id = 5,
                            Level = "Standard"
                        });
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResolverId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResolverId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketResolutions");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Aberto"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Em Andamento"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Resolvido"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Cancelado"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Encerrado"
                        });
                });

            modelBuilder.Entity("PortalHelpdesk.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ADUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Worklog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("TimeTaken")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Worklogs");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Attachments.MessageAttachment", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalHelpdesk.Models.Messages.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Attachments.ResolutionAttachment", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Attachments.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalHelpdesk.Models.TicketResolution", "TicketResolution")
                        .WithMany("Attachments")
                        .HasForeignKey("ResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("TicketResolution");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Conversation", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Ticket", "Ticket")
                        .WithMany("Conversations")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Messages.ConversationMessage", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalHelpdesk.Models.Messages.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Ticket", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.User", "Assignee")
                        .WithMany("TicketsAssigned")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PortalHelpdesk.Models.TicketCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("PortalHelpdesk.Models.User", "Creator")
                        .WithMany("TicketsCreated")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PortalHelpdesk.Models.Group", "Group")
                        .WithMany("Tickets")
                        .HasForeignKey("GroupId");

                    b.HasOne("PortalHelpdesk.Models.Messages.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("PortalHelpdesk.Models.TicketPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("PortalHelpdesk.Models.User", "Requester")
                        .WithMany("TicketsRequested")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PortalHelpdesk.Models.TicketStatus", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("TicketStatusId");

                    b.Navigation("Assignee");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Message");

                    b.Navigation("Priority");

                    b.Navigation("Requester");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketHistory", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.AtomicOperation", "AtomicOperation")
                        .WithMany()
                        .HasForeignKey("AtomicOperationId");

                    b.HasOne("PortalHelpdesk.Models.User", "Modifier")
                        .WithMany("TicketChanges")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PortalHelpdesk.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("AtomicOperation");

                    b.Navigation("Modifier");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketResolution", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.User", "Resolver")
                        .WithMany("TicketsResolved")
                        .HasForeignKey("ResolverId");

                    b.HasOne("PortalHelpdesk.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Resolver");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.User", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Worklog", b =>
                {
                    b.HasOne("PortalHelpdesk.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalHelpdesk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Group", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Messages.Message", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.Ticket", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.TicketResolution", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("PortalHelpdesk.Models.User", b =>
                {
                    b.Navigation("TicketChanges");

                    b.Navigation("TicketsAssigned");

                    b.Navigation("TicketsCreated");

                    b.Navigation("TicketsRequested");

                    b.Navigation("TicketsResolved");
                });
#pragma warning restore 612, 618
        }
    }
}
